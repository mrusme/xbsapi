// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mrusme/xbsapi/ent/bookmark"
	"github.com/mrusme/xbsapi/ent/predicate"
)

// BookmarkUpdate is the builder for updating Bookmark entities.
type BookmarkUpdate struct {
	config
	hooks    []Hook
	mutation *BookmarkMutation
}

// Where appends a list predicates to the BookmarkUpdate builder.
func (bu *BookmarkUpdate) Where(ps ...predicate.Bookmark) *BookmarkUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBookmarks sets the "bookmarks" field.
func (bu *BookmarkUpdate) SetBookmarks(s string) *BookmarkUpdate {
	bu.mutation.SetBookmarks(s)
	return bu
}

// SetNillableBookmarks sets the "bookmarks" field if the given value is not nil.
func (bu *BookmarkUpdate) SetNillableBookmarks(s *string) *BookmarkUpdate {
	if s != nil {
		bu.SetBookmarks(*s)
	}
	return bu
}

// SetVersion sets the "version" field.
func (bu *BookmarkUpdate) SetVersion(s string) *BookmarkUpdate {
	bu.mutation.SetVersion(s)
	return bu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (bu *BookmarkUpdate) SetNillableVersion(s *string) *BookmarkUpdate {
	if s != nil {
		bu.SetVersion(*s)
	}
	return bu
}

// SetCreated sets the "created" field.
func (bu *BookmarkUpdate) SetCreated(t time.Time) *BookmarkUpdate {
	bu.mutation.SetCreated(t)
	return bu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (bu *BookmarkUpdate) SetNillableCreated(t *time.Time) *BookmarkUpdate {
	if t != nil {
		bu.SetCreated(*t)
	}
	return bu
}

// SetLastUpdated sets the "lastUpdated" field.
func (bu *BookmarkUpdate) SetLastUpdated(t time.Time) *BookmarkUpdate {
	bu.mutation.SetLastUpdated(t)
	return bu
}

// SetDeleted sets the "deleted" field.
func (bu *BookmarkUpdate) SetDeleted(t time.Time) *BookmarkUpdate {
	bu.mutation.SetDeleted(t)
	return bu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (bu *BookmarkUpdate) SetNillableDeleted(t *time.Time) *BookmarkUpdate {
	if t != nil {
		bu.SetDeleted(*t)
	}
	return bu
}

// ClearDeleted clears the value of the "deleted" field.
func (bu *BookmarkUpdate) ClearDeleted() *BookmarkUpdate {
	bu.mutation.ClearDeleted()
	return bu
}

// Mutation returns the BookmarkMutation object of the builder.
func (bu *BookmarkUpdate) Mutation() *BookmarkMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookmarkUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookmarkUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookmarkUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookmarkUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BookmarkUpdate) defaults() {
	if _, ok := bu.mutation.LastUpdated(); !ok {
		v := bookmark.UpdateDefaultLastUpdated()
		bu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookmarkUpdate) check() error {
	if v, ok := bu.mutation.Version(); ok {
		if err := bookmark.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Bookmark.version": %w`, err)}
		}
	}
	return nil
}

func (bu *BookmarkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookmark.Table, bookmark.Columns, sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Bookmarks(); ok {
		_spec.SetField(bookmark.FieldBookmarks, field.TypeString, value)
	}
	if value, ok := bu.mutation.Version(); ok {
		_spec.SetField(bookmark.FieldVersion, field.TypeString, value)
	}
	if value, ok := bu.mutation.Created(); ok {
		_spec.SetField(bookmark.FieldCreated, field.TypeTime, value)
	}
	if value, ok := bu.mutation.LastUpdated(); ok {
		_spec.SetField(bookmark.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := bu.mutation.Deleted(); ok {
		_spec.SetField(bookmark.FieldDeleted, field.TypeTime, value)
	}
	if bu.mutation.DeletedCleared() {
		_spec.ClearField(bookmark.FieldDeleted, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookmark.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookmarkUpdateOne is the builder for updating a single Bookmark entity.
type BookmarkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookmarkMutation
}

// SetBookmarks sets the "bookmarks" field.
func (buo *BookmarkUpdateOne) SetBookmarks(s string) *BookmarkUpdateOne {
	buo.mutation.SetBookmarks(s)
	return buo
}

// SetNillableBookmarks sets the "bookmarks" field if the given value is not nil.
func (buo *BookmarkUpdateOne) SetNillableBookmarks(s *string) *BookmarkUpdateOne {
	if s != nil {
		buo.SetBookmarks(*s)
	}
	return buo
}

// SetVersion sets the "version" field.
func (buo *BookmarkUpdateOne) SetVersion(s string) *BookmarkUpdateOne {
	buo.mutation.SetVersion(s)
	return buo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (buo *BookmarkUpdateOne) SetNillableVersion(s *string) *BookmarkUpdateOne {
	if s != nil {
		buo.SetVersion(*s)
	}
	return buo
}

// SetCreated sets the "created" field.
func (buo *BookmarkUpdateOne) SetCreated(t time.Time) *BookmarkUpdateOne {
	buo.mutation.SetCreated(t)
	return buo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (buo *BookmarkUpdateOne) SetNillableCreated(t *time.Time) *BookmarkUpdateOne {
	if t != nil {
		buo.SetCreated(*t)
	}
	return buo
}

// SetLastUpdated sets the "lastUpdated" field.
func (buo *BookmarkUpdateOne) SetLastUpdated(t time.Time) *BookmarkUpdateOne {
	buo.mutation.SetLastUpdated(t)
	return buo
}

// SetDeleted sets the "deleted" field.
func (buo *BookmarkUpdateOne) SetDeleted(t time.Time) *BookmarkUpdateOne {
	buo.mutation.SetDeleted(t)
	return buo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (buo *BookmarkUpdateOne) SetNillableDeleted(t *time.Time) *BookmarkUpdateOne {
	if t != nil {
		buo.SetDeleted(*t)
	}
	return buo
}

// ClearDeleted clears the value of the "deleted" field.
func (buo *BookmarkUpdateOne) ClearDeleted() *BookmarkUpdateOne {
	buo.mutation.ClearDeleted()
	return buo
}

// Mutation returns the BookmarkMutation object of the builder.
func (buo *BookmarkUpdateOne) Mutation() *BookmarkMutation {
	return buo.mutation
}

// Where appends a list predicates to the BookmarkUpdate builder.
func (buo *BookmarkUpdateOne) Where(ps ...predicate.Bookmark) *BookmarkUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookmarkUpdateOne) Select(field string, fields ...string) *BookmarkUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bookmark entity.
func (buo *BookmarkUpdateOne) Save(ctx context.Context) (*Bookmark, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookmarkUpdateOne) SaveX(ctx context.Context) *Bookmark {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookmarkUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookmarkUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BookmarkUpdateOne) defaults() {
	if _, ok := buo.mutation.LastUpdated(); !ok {
		v := bookmark.UpdateDefaultLastUpdated()
		buo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookmarkUpdateOne) check() error {
	if v, ok := buo.mutation.Version(); ok {
		if err := bookmark.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Bookmark.version": %w`, err)}
		}
	}
	return nil
}

func (buo *BookmarkUpdateOne) sqlSave(ctx context.Context) (_node *Bookmark, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookmark.Table, bookmark.Columns, sqlgraph.NewFieldSpec(bookmark.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bookmark.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookmark.FieldID)
		for _, f := range fields {
			if !bookmark.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookmark.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Bookmarks(); ok {
		_spec.SetField(bookmark.FieldBookmarks, field.TypeString, value)
	}
	if value, ok := buo.mutation.Version(); ok {
		_spec.SetField(bookmark.FieldVersion, field.TypeString, value)
	}
	if value, ok := buo.mutation.Created(); ok {
		_spec.SetField(bookmark.FieldCreated, field.TypeTime, value)
	}
	if value, ok := buo.mutation.LastUpdated(); ok {
		_spec.SetField(bookmark.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := buo.mutation.Deleted(); ok {
		_spec.SetField(bookmark.FieldDeleted, field.TypeTime, value)
	}
	if buo.mutation.DeletedCleared() {
		_spec.ClearField(bookmark.FieldDeleted, field.TypeTime)
	}
	_node = &Bookmark{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookmark.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
